{"version":3,"sources":["components/fiche/fiche.component.jsx","components/fiche-list/fiche-list.component.jsx","components/zoneRecherche/zone-recherche.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Fiche","props","className","src","monstre","id","alt","name","email","FicheList","monstres","map","key","ZoneRecherche","placeholder","gererChangement","type","onChange","App","e","setState","champsRecherche","target","value","state","fetch","then","response","json","users","this","monstresFiltre","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"uTAIaA,G,MAAQ,SAACC,GAAD,OAEjB,yBAAKC,UAAU,mBAEf,yBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAI,YAEhF,4BAAKL,EAAMG,QAAQG,MAEf,2BAAIN,EAAMG,QAAQI,UCLbC,G,MAAY,SAAAR,GAIvB,OAAO,yBAAKC,UAAU,cAEdD,EAAMS,SAASC,KAAI,SAAAP,GAAO,OAExB,kBAAC,EAAD,CAAOQ,IAAKR,EAAQC,GAAID,QAASA,UCThCS,G,MAAgB,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,gBAAhB,OAE3B,2BAEEb,UAAY,YAEZc,KAAK,SAASF,YAAaA,EAE3BG,SAAUF,MCoHCG,G,wDApGb,aAAe,IAAD,8BAEZ,gBA8CFH,gBAAkB,SAACI,GAEjB,EAAKC,SAAS,CAAEC,gBAAiBF,EAAEG,OAAOC,SA5C1C,EAAKC,MAAQ,CACXd,SAAU,GACVW,gBAAiB,IARP,E,gEAuCO,IAAD,OAElBI,MAAM,8CAEHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEV,SAAUmB,S,+BAYpC,MAE+BC,KAAKN,MAAnCd,EAFD,EAECA,SAAUW,EAFX,EAEWA,gBACVU,EAAiBrB,EAASsB,QAAO,SAAA5B,GAAO,OAEhDA,EAAQG,KAAK0B,cAAcC,SAASb,EAAgBY,kBAGpD,OAEE,yBAAK/B,UAAU,OACb,qDACA,kBAAC,EAAD,CAEEY,YAAY,mBAEVC,gBAAmBe,KAAKf,kBAG5B,kBAAC,EAAD,CAAWL,SAAUqB,S,GA5EXI,cCjBEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAGP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4a854db0.chunk.js","sourcesContent":["import React from \"react\"\nimport './fiche.styles.css'\n\n\nexport const Fiche = (props) => (\n\n    <div className=\"fiche-container\" >\n\n    <img src={`https://robohash.org/${props.monstre.id}?set=set3&size=180x180`} alt=\"monstre\"/>\n\n    <h2>{props.monstre.name}</h2>\n\n        <p>{props.monstre.email}</p>\n</div>\n)\n\n","import React from 'react'   // notre composant importe la libriairie React\n\nimport { Fiche } from '../fiche/fiche.component'\n\nimport './fiche-list-styles.css'   // pour utiliser notte feuille de style css dans notre composant\n\n\nexport const FicheList = props => {    // et exporte une fonction qui reçoit des paramètres nommés props et retourne du JSX\n\n  //console.log(props)\n\n  return <div className='fiche-list'>\n      {\n          props.monstres.map(monstre => (\n\n            <Fiche key={monstre.id} monstre={monstre}/>\n    \n          ))\n      }\n  </div>\n\n}","import React from 'react'\n\nimport './zone-recherche.styles.css'\n\n\n\nexport const ZoneRecherche = ({ placeholder, gererChangement }) => (\n\n  <input\n\n    className = \"recherche\"\n\n    type=\"search\" placeholder={placeholder}\n\n    onChange={gererChangement}\n\n  />\n\n)\n","import React, { Component} from 'react';      // moteur de gestion\n//import logo from './logo.svg';    // image vectorielle du logo\nimport {FicheList} from './components/fiche-list/fiche-list.component.jsx'; // pour tester notre nouveau composant FicheList\n\nimport { ZoneRecherche } from \"./components/zoneRecherche/zone-recherche.component.jsx\" ;\n\nimport './App.css';               // pour la mise en forme CSS\n\n/*function App() {           // fonction qui retourne un bloc HTML\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n*/\nclass App extends Component{   // importation de la Clase Componend\n  constructor() {\n\n    super()\n\n\n\n    this.state = {              // objet state\n      monstres: [ ],            // dans un array  ici on initialise l'array monstres à vide\n      champsRecherche: ''          \n/*\n        {\n\n          nom: 'Frankenstein',\n          id: 'm1'                // ajout d'un id pour clé unique\n\n        },\n\n        {\n\n          nom: 'Dracula',\n          id: 'm2'\n\n        },\n\n        {\n\n          nom: 'Zombie',\n          id: 'm3'\n\n        }\n\n      ]*/\n      \n\n    }\n    //this.gererChangement = this.gererChangement.bind(this)\n\n  }\n\n  componentDidMount() {   // méthode de cycle ou nous allons pouvoir attendre la réponse du serveur avec la fonction JavaScript fetch()\n\n    fetch('https://jsonplaceholder.typicode.com/users')\n\n      .then(response => response.json())\n      .then(users => this.setState({ monstres: users}))\n  \n  }\n\n  gererChangement = (e) => {\n\n    this.setState({ champsRecherche: e.target.value })\n\n}\n\n\n  // AFFICHAGE à L'ECRAN:\n  render() {     // méthode qui retourne le code HTML => met à jour le dom viruel automatiquement\n    \n    const { monstres, champsRecherche } = this.state  // création d' une copie du tableau et variable dans la méthode render() :\n      const monstresFiltre = monstres.filter(monstre => \n\n    monstre.name.toLowerCase().includes(champsRecherche.toLowerCase())\n\n    )\n    return (\n\n      <div className=\"App\">\n        <h1> Monstres carroussel </h1>\n        <ZoneRecherche\n\n          placeholder=\"Cherche monstres\"\n\n            gererChangement = {this.gererChangement}\n\n          />\n        <FicheList monstres={monstresFiltre}/>\n        </div>/*{\n\n\n          this.state.monstres.map(monstre => (   // map() qui retourne le nom du monstres en titre niveau 1 et cela pour tout les éléments de l'array state.monstres\n\n            <h1 key={ monstre.id }> {monstre.name }</h1>  // React doit savoir identifier tous les éléments du DOM afin de pouvoir gérer les modifications individuel.\n                                              // Maintenant il est possible de changer une valeur, et seul, celle-ci sera rendue dans le DOM.\n          ))  \n\n          }\n          </FicheList>\n\n      </div>*/\n\n    )\n      \n  }\n  \n\n  }\n\n  \n\n\nexport default App;\n\n\n  \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(          // librairie reactDom Qui appelle la méthode render() qui va rendre la fonction App et remplace l'élément root de la page index.html qui se trouve dans le dossier public\n                          // Tout le projet sera inséré dans cette <div id=\"root\"> de la page.\n                          \n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}